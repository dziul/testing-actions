# @ref [semantic-release](https://github.com/semantic-release/semantic-release)
# @ref [nextrelease](https://github.com/semantic-release/semantic-release/blob/master/docs/developer-guide/js-api.md#nextrelease)
# @ref [js api](https://semantic-release.gitbook.io/semantic-release/developer-guide/js-api)

name: "Semantic Release Action"
description: "Fully automated version management"

# @ref [action-branding](https://actions-cool.github.io/github-action-branding/)
branding:
  icon: 'tag'
  color: 'purple'
  
inputs:
  working-directory:
    description: "Directory run command"
    default: .
  config-file-path:
    description: "Configuration file from semantic-release"
    required: false
    type: string
    default: '.releaserc'
  dry-run:
    description: "The objective of the dry-run mode is to get a preview of the pending release."
    required: false
    type: boolean
    default: false
    
outputs:
  last-version:
    description: "The version of the last release"
    value: ${{ steps.release.outputs.last-version }}
  next-version:
    description: "The version of the next release"
    value: ${{ steps.release.outputs.next-version }}
  channel:
    description: "The distribution channel on which the last release was initially made available (`undefined` for the default distribution channel)"
    value: ${{ steps.release.outputs.channel }}
 

runs:
  using: "composite"
  steps:
    
    - name: Checking exists configuration file and release version
      id: release
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        TEMP_FILE=".releaserc_${{ github.sha }}"
        CONFIG_FILENAME=".releaserc"
        CONTENT='{"branches":["main","master"],"plugins":["@semantic-release/commit-analyzer","@semantic-release/release-notes-generator"]}'
        if [ -f "${{ inputs.config-file-path }}" ]; then
        
          echo "::notice:: Found file ${{ inputs.config-file-path }}"
          CONTENT=$(cat ${{ inputs.config-file-path }})
          
          ### Checking if the configuration is in package.json
          
          if [ "$(echo $CONTENT | jq 'has("release")')" == "true"  ]; then
            CONTENT=$(echo $CONTENT | jq '.release')
          fi
          if [[ ! "${{ inputs.config-file-path }}" =~ "package*" ]]; then
            rm -f ${{ inputs.config-file-path }}
          fi
          ###
          
        fi
        
        
        git fetch --quiet

        
        echo $CONTENT | jq \
        --arg config_file $CONFIG_FILENAME \
        --arg file_temp $TEMP_FILE \
        '.plugins|= .+ [["@semantic-release/exec",{"analyzeCommitsCmd":"echo \"last-version::${lastRelease.version}\" >> \($file_temp | tojson)", "verifyConditionsCmd": "rm -f \($config_file | tojson)", "successCmd": "echo \"next-version::${nextRelease.version}\">>\($file_temp | tojson) && echo \"channel::${nextRelease.channel}\">>\($file_temp | tojson)"}]]' > $CONFIG_FILENAME
        
        DRY_RUN=${{ inputs.dry-run && '-d' }}
        
        rm -f package*.json
        
        npm init -y

        while IFS= read -r line; do
          eval "npm i -s $line"
        done < <(echo $CONTENT | jq -c '.plugins//[]|map(if type=="array" then .[0] else . end) | . + ["@semantic-release/exec"] | unique | .[]')
        
        npx semantic-release --no-ci
        
        if [ -f "$TEMP_FILE" ]; then
        
          while IFS= read -r line; do
            echo "::set-output name=$line"
            echo "::notice:: $line"
          done < $TEMP_FILE
        
          ### remover arquivos criados e atualizados
          
          git clean -df
          git checkout .
          
        fi
        
