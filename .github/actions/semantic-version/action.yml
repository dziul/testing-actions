# @ref [semantic-release](https://github.com/semantic-release/semantic-release)
# @ref [nextrelease](https://github.com/semantic-release/semantic-release/blob/master/docs/developer-guide/js-api.md#nextrelease)

name: "Semantic Versioning"
description: "Release tag and badge versioning"

# @ref [action-branding](https://actions-cool.github.io/github-action-branding/)
branding:
  icon: 'tag'
  color: 'purple'
  
inputs:
  config_file_path:
    description: "Configuration file from semantic-release"
    required: false
    type: string
    default: ''
  dry_run:
    description: "The objective of the dry-run mode is to get a preview of the pending release."
    required: false
    type: boolean
    default: false
    
outputs:
  current_version:
    description: "The version of the current release"
    value: ${{ steps.checking.outputs.current_version }}
  version:
    description: "The version of the last release"
    value: ${{ steps.checking.outputs.version }}
  channel:
    description: "The distribution channel on which the last release was initially made available (undefined for the default distribution channel)"
    value: ${{ steps.checking.outputs.version }}
 
    
runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v3
    
    - uses: actions/setup-node@v3
      with:
        node-version: 16
         
    - name: Checking exists configuration file and release version
      id: checking
      shell: bash
      run: |
        CONFIG_FILENAME=".releaserc"
        CONTENT='{"branches":["main","master"],"plugins":["@semantic-release/commit-analyzer","@semantic-release/release-notes-generator"]}'
        if [ -f "${{ inputs.config_file_path }}" ]; then
          CONTENT=$(cat ${{ inputs.config_file_path }})
          rm -f ${{ inputs.config_file_path }}
        fi        
        echo $CONTENT | jq --arg config_file $CONFIG_FILENAME '.plugins|= .+ [["@semantic-release/exec",{"verifyConditionsCmd": "rm -f \($config_file | tojson) && echo \"::set-output name=current_version::${lastRelease.version}\"","successCmd": "echo \"::set-output name=version::${nextRelease.version}\" && echo \"::set-output name=channel::${nextRelease.channel}\""}]]' > $CONFIG_FILENAME
        NPX_PACKAGES="$(echo $CONTENT | jq '.plugins|map(if type=="array" then .[0] else . end) | unique | reduce .[] as $item ("-y"; . + " -p " + $item)') -p @semantic-release/exec"
        NPX_FLAGS="-d ${{ inputs.dry_run }}"
        eval "npx $NPX_PACKAGES semantic-release $FLAGS"
    - shell: bash
      run: echo ${{ steps.checking.outputs.current_version }}
       
      
      
